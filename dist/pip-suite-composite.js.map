{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../node_modules/async/lib/async.js","../node_modules/process/browser.js","../node_modules/timers-browserify/main.js","src/checklist_edit/ChecklistEdit.ts","src/checklist_view/ChecklistView.ts","src/composite_edit/CompositeEdit.ts","src/composite_summary/CompositeSummary.ts","src/composite_toolbar/CompositeToolbar.ts","src/composite_view/CompositeView.ts","src/content_switch/ContentSwitch.ts","src/data/ChecklistItem.ts","src/data/Content.ts","src/data/ContentBlockType.ts","src/data/EmbeddedType.ts","src/data/index.ts","src/embedded_edit/EmbeddedEdit.ts","src/embedded_view/EmbeddedView.ts","src/index.ts","src/mobile_mouse/MobileMousedown.ts","src/mobile_mouse/MobileMouseup.ts","src/mobile_mouse/index.ts","src/utilities/CompositeFocused.ts","temp/pip-suite-composite-html.min.js"],"names":[],"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":"pip-suite-composite.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","import { ChecklistItem } from '../data';\nexport const ChecklistDraggEvent: string = 'onChecklistDrag';\n\n{\n\n    class ChecklistSelected {\n        public index: number = 0;\n        public drag: boolean;\n        public dragInit: boolean;\n        public dragId: number = 0;\n        public id: number;\n        public isChanged: boolean = false;\n    }\n\n    interface IChecklistEditBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipChanged: any;\n        pipDraggable: any;\n        pipOptions: any;\n        pipScrollContainer: any;\n        pipRebind: any;\n    }\n\n    const ChecklistEditBindings: IChecklistEditBindings = {\n        ngDisabled: '<?',\n        pipChanged: '=?',\n        pipDraggable: '<?',\n        pipOptions: '=',\n        pipScrollContainer: '<?',\n        pipRebind: '<?'\n    }\n\n    class ChecklistEditBindingsChanges implements ng.IOnChangesObject, IChecklistEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipChanged: ng.IChangesObject<() => ng.IPromise<void>>;\n        pipDraggable: ng.IChangesObject<boolean>;\n        pipOptions: ng.IChangesObject<ChecklistItem[]>;\n        pipScrollContainer: ng.IChangesObject<string>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class ChecklistEditController {\n        public ngDisabled: boolean;\n        public pipChanged: Function;\n        public pipDraggable: boolean;\n        public pipScrollContainer: string;\n        public pipOptions: ChecklistItem[];\n        public pipRebind: boolean;\n\n        private _debounceChange: any;\n\n        public selected: ChecklistSelected;\n\n        public checklistContent: ChecklistItem[];\n        public isWidth: boolean;\n\n\n        constructor(\n            private $element: JQuery,\n            private $timeout: ng.ITimeoutService,\n            private $document,\n            private $rootScope: ng.IRootScopeService\n        ) {\n            \"ngInject\";\n\n            $element.addClass('pip-checklist-edit');\n\n            if (!this.pipOptions || !_.isArray(this.pipOptions)) {\n                this.pipOptions = [];\n            }\n\n            this.selected = new ChecklistSelected();\n            this.selected.drag = this.pipDraggable;\n            this.selected.dragInit = this.pipDraggable;\n            this.selected.id = this.now();\n\n            this.generateList(this.pipOptions);\n\n            this._debounceChange = _.debounce(() => {\n                this.onChecklistChange();\n            }, 200);\n\n        }\n\n        public $onChanges(changes: ChecklistEditBindingsChanges): void {\n            if (this.toBoolean(this.pipRebind)) {\n                if (changes.pipOptions && changes.pipOptions.currentValue) {\n                    if (!angular.equals(this.pipOptions, changes.pipOptions.currentValue)) {\n                        if (!this.selected.isChanged) {\n                            this.generateList(changes.pipOptions.currentValue);\n                            // this.pipOptions = changes.pipOptions.currentValue;\n                        } else {\n                            this.selected.isChanged = false;\n                        }\n                    }\n                }\n                if (changes.pipDraggable && changes.pipDraggable.currentValue) {\n                    this.pipDraggable = changes.pipDraggable.currentValue;\n                }\n            }\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) { return false; }\n            if (!value) { return false; }\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        private getCaret(el: any): number {\n            if (el.selectionStart) {\n                return el.selectionStart;\n            } else if (this.$document.selection) {\n                el.focus();\n\n                let r = this.$document.selection.createRange();\n                if (r == null) {\n                    return 0;\n                }\n\n                var re = el.createTextRange(),\n                    rc = re.duplicate();\n                re.moveToBookmark(r.getBookmark());\n                rc.setEndPoint('EndToStart', re);\n\n                return rc.text.length;\n            }\n\n            return 0;\n        }\n\n        private setSelectionRange(input, selectionStart, selectionEnd): void {\n            if (input.setSelectionRange) {\n                input.focus();\n                input.setSelectionRange(selectionStart, selectionEnd);\n            } else if (input.createTextRange) {\n                var range = input.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', selectionEnd);\n                range.moveStart('character', selectionStart);\n                range.select();\n            }\n        }\n\n        private setCaretToPos(input, pos): void {\n            this.setSelectionRange(input, pos, pos);\n        }\n\n        private addItem(text: string, index: number): void {\n            let newItem: ChecklistItem = this.getNewItem(text, false);\n            if (index > -1) {\n                this.selected.index = index;\n            }\n\n            if (this.checklistContent.length < 2) {\n                this.checklistContent.unshift(newItem);\n            } else {\n                this.checklistContent.splice(this.selected.index + 1, 0, newItem);\n            }\n            this.selected.index += 1;\n            this.setFocus(this.selected.index);\n\n            this._debounceChange();\n        }\n\n        private updateContents(): void {\n            this.selected.isChanged = true;\n            let content: ChecklistItem[] = [];\n            _.each(this.checklistContent, (item: ChecklistItem) => {\n                if (!item.empty) {\n                    content.push({\n                        checked: item.checked,\n                        text: item.text\n                    })\n                }\n            })\n\n            this.pipOptions = content;\n        }\n\n        private setFocus(index: number, toPos?: any): void {\n            if (index > -1) {\n                setTimeout(() => {\n                    let nextElement = angular.element('#check-item-text-' + this.selected.id + '-' + index);\n                    if (nextElement) {\n                        nextElement.focus();\n                        if (toPos !== undefined && nextElement[0]) {\n                            this.setCaretToPos(nextElement[0], toPos);\n                        }\n                    }\n                }, 50);\n            }\n        }\n\n        private getNewItem(text?: string, isEmpty?: boolean): ChecklistItem {\n            let newItem: ChecklistItem = {\n                checked: false,\n                text: text || '',\n                empty: isEmpty\n            };\n\n            return newItem;\n        }\n\n        private now(): number {\n            return +new Date;\n        }\n\n        private clearList(): void {\n            this.selected.index = 0;\n            this.checklistContent = [];\n            // push empty item\n            this.checklistContent.push(this.getNewItem('', true));\n        }\n\n        private generateList(content: ChecklistItem[]): void {\n            if (!content || content.length < 1) {\n                this.clearList();\n            } else {\n                this.checklistContent = [];\n                _.each(content, (item) => {\n                    this.checklistContent.push(item);\n                });\n                // push empty item\n                this.checklistContent.push(this.getNewItem('', true));\n            }\n        }\n\n        private setWidth100(): void {\n            let element = angular.element('#check-item-' + + this.selected.id + '-' + this.selected.index);\n            element.css(\"width\", 'none');\n            element.css(\"max-width\", 'none');\n        }\n\n        private setWidth(): void {\n            if (this.isWidth) return;\n\n            let elementEtalon = angular.element('#check-item-empty-' + this.selected.id);\n            let value: number = elementEtalon.width();\n            let element = angular.element('#check-item-' + this.selected.id + '-' + this.selected.index);\n            if (element) {\n                element.css(\"width\", value + 'px');\n                element.css(\"max-width\", value + 'px');\n            }\n        }\n\n        // public functions\n\n        public onItemFocus(index: number): void {\n            if (this.ngDisabled) return;\n            this.selected.index = index;\n        }\n\n        public isSelectedItem(index: number): boolean {\n            let empty: boolean;\n            try {\n                empty = this.checklistContent[index].empty;\n            } catch (err) {\n                empty = true;\n            }\n\n            return this.selected.index == index && this.pipDraggable && !empty;\n        }\n\n        public onAddItem(): void {\n            this.addItem('', this.selected.index - 1);\n        }\n\n        public onChangeItem(index: number): void {\n            if (index > -1 && this.checklistContent[index] && this.checklistContent[index].empty) {\n                if (this.checklistContent[index].empty) {\n                    this.checklistContent[index].empty = false;\n                    this.checklistContent.push(this.getNewItem('', true));\n                }\n            }\n            this._debounceChange();\n        }\n\n        public onClick($event: JQueryEventObject, index: number): void {\n            if (this.ngDisabled) { return; }\n\n            this.selected.index = index;\n        }\n\n        public onTextAreaClick($event: JQueryEventObject, index: number) {\n            if (this.ngDisabled) { return; }\n\n            this.selected.index = index;\n        }\n\n        public onDropComplete(placeIndex: number, obj: ChecklistItem, $event: JQueryEventObject, componentId: number) {\n            if (this.selected.id != componentId) { return; }\n            if (!this.selected.drag) { return; }\n\n            let index: number = placeIndex;\n            let tmpIndex: number = this.selected.index;\n            let checklist: ChecklistItem[] = _.cloneDeep(this.checklistContent);\n\n            if (!(tmpIndex == 0 && placeIndex == 1)) {\n                if (tmpIndex > index) {\n                    if (index > checklist.length - 1) {\n                        index = checklist.length - 1;\n                    }\n                    // move up\n                    for (let i = 0; i < tmpIndex - index; i++) {\n                        checklist[tmpIndex - i] = checklist[tmpIndex - i - 1];\n                    }\n                    checklist[index] = obj;\n                }\n                if (tmpIndex < index) {\n                    index -= 1;\n                    //move down\n                    for (var i = 0; i < index - tmpIndex; i++) {\n                        checklist[tmpIndex + i] = checklist[tmpIndex + i + 1];\n                    }\n                    checklist[index] = obj;\n                }\n\n                this.selected.index = index;\n            }\n\n            this.checklistContent = checklist;\n            this._debounceChange();\n        }\n\n        public onMove(): void {\n            this.setWidth();\n            this.isWidth = true;\n        }\n\n\n        public onStop(id: number): void {\n            this.$timeout(() => {\n                this.selected.drag = this.selected.dragInit;\n                this.selected.dragId = 0;\n            }, 50);\n\n            if (this.isWidth) {\n                this.setWidth100();\n                this.isWidth = false;\n            }\n        }\n\n        public onStart(id: number): void {\n            this.selected.isChanged = true;\n            if (id && id != this.selected.dragId) {\n                this.selected.drag = false;\n            }\n        }\n\n        public onDownDragg(item: ChecklistItem): void {\n            if (this.pipDraggable && this.checklistContent.length > 2 && !item.empty) {\n                this.$rootScope.$broadcast(ChecklistDraggEvent);\n                this.selected.dragId = this.selected.id;\n            }\n        }\n\n        public onDeleteItem(index: number, item: ChecklistItem): void {\n            if (this.checklistContent.length == 1) {\n                this.checklistContent[0].text = '';\n                this.checklistContent[0].checked = false;\n                this.checklistContent[0].empty = true;\n                this.selected.index = 0;\n            } else {\n                if (index >= 0 && index <= this.checklistContent.length) {\n                    this.checklistContent.splice(index, 1);\n                } else {\n                    return;\n                }\n            }\n\n            if (this.selected.index >= this.checklistContent.length) {\n                this.selected.index = this.checklistContent.length - 1;\n            }\n\n            this.setFocus(this.selected.index, 0);\n            this._debounceChange();\n        }\n\n        public onChecked(item: ChecklistItem): void {\n            this._debounceChange();\n        }\n\n        public onChecklistChange(): void {\n            this.updateContents();\n\n            if (this.pipChanged) {\n                this.$timeout(() => {\n                    this.pipChanged(this.pipOptions);\n                }, 0);\n            }\n        }\n\n\n        public onTextareaKeyDown($event: KeyboardEvent, index: number, item: ChecklistItem) {\n            if (this.ngDisabled) return;\n            if (this.selected.index == -1) return;\n            let textareaLength: number;\n            let posCaret: any;\n            if ($event && $event.target) {\n                // calculate caret position\n                posCaret = this.getCaret($event.target);\n                // calculate textarea length\n                if ($event.target['value'] !== undefined) {\n                    textareaLength = $event.target['value'].length;\n                }\n\n            }\n\n            // delete empty item after backspace or del\n            if (this.selected.index > 0 && item.text != '' && posCaret == 0 && $event.keyCode == 8 && !$event.ctrlKey && !$event.shiftKey) {\n                if (!item.empty) {\n                    var position = this.checklistContent[this.selected.index - 1].text.length;\n                    this.checklistContent[this.selected.index - 1].text = this.checklistContent[this.selected.index - 1].text + item.text;\n                    this.selected.index -= 1;\n                    this.checklistContent.splice(this.selected.index + 1, 1);\n                    this._debounceChange();\n\n                    this.setFocus(this.selected.index, position);\n                }\n                if ($event) { $event.stopPropagation(); }\n\n                return false;\n            }\n\n            if (item.text == '' && ($event.keyCode == 8 || $event.keyCode == 46) && !$event.ctrlKey && !$event.shiftKey) {\n                if (!item.empty) {\n                    this.onDeleteItem(index, item);\n                }\n                if ($event) { $event.stopPropagation(); }\n\n                return false;\n            }\n\n            //press enter - create new item\n            if (($event.keyCode == 13 || $event.keyCode == 45) && !$event.ctrlKey && !$event.shiftKey) {  // insert\n                if (posCaret !== undefined && posCaret == 0) {\n                    // add item before current item\n                    if (this.selected.index > 0) {\n                        this.addItem('', this.selected.index - 1);\n                    } else {\n                        this.selected.index = -1;\n                        this.addItem('', -1);\n                    }\n                    if ($event) { $event.stopPropagation(); }\n                    if ($event) { $event.preventDefault(); }\n\n                    return false;\n                }\n\n                if (textareaLength && posCaret && textareaLength == posCaret) {\n                    // add item after current item\n                    if (!item.empty) {\n                        this.addItem('', this.selected.index);\n                    }\n                    if ($event) { $event.stopPropagation(); }\n                    if ($event) { $event.preventDefault(); }\n\n                    return false;\n                }\n\n                if (textareaLength && posCaret && textareaLength > posCaret) {\n                    // divide current item \n                    if (!item.empty) {\n                        let valueCurrent: string;\n                        let newItem: string;\n                        valueCurrent = item.text.substring(0, posCaret);\n                        newItem = item.text.substring(posCaret);\n                        item.text = valueCurrent;\n                        this.addItem(newItem, this.selected.index);\n\n                        this.setFocus(this.selected.index, 0);\n                    }\n                    if ($event) { $event.stopPropagation(); }\n                    if ($event) { $event.preventDefault(); }\n\n                    return false;\n                }\n\n                if ($event) { $event.preventDefault(); }\n\n                return false;\n            }\n\n            // move cursor up\n            if ((posCaret === 0 || posCaret == textareaLength) && this.checklistContent.length > 1 && $event.keyCode == 38 && !$event.ctrlKey && !$event.shiftKey) {  // insert\n                if ($event) { $event.stopPropagation(); }\n                if ($event) { $event.preventDefault(); }\n\n                if (posCaret !== undefined && textareaLength !== undefined && posCaret == 0) {\n                    // move to new item\n                    if (this.selected.index == 0) {\n                        this.selected.index = this.checklistContent.length - 1;\n                        var position = this.checklistContent[this.selected.index].text.length;\n                        this.setFocus(this.selected.index, position);\n                    } else {\n                        this.selected.index -= 1;\n                        var position = this.checklistContent[this.selected.index].text.length;\n                        this.setFocus(this.selected.index, position);\n                    }\n                } else {\n                    // move caret to text end\n                    this.setFocus(this.selected.index, 0);\n                }\n\n                return false;\n            }\n\n            // move cursor down\n            if ((posCaret === 0 || posCaret == textareaLength) && this.checklistContent.length > 1 && $event.keyCode == 40 && !$event.ctrlKey && !$event.shiftKey) {  // insert\n                if ($event) { $event.stopPropagation(); }\n                if ($event) { $event.preventDefault(); }\n\n                if (posCaret !== undefined && textareaLength !== undefined && posCaret == textareaLength) {\n                    // move to new item\n                    if (this.selected.index >= this.checklistContent.length - 1) {\n                        this.selected.index = 0;\n                        this.setFocus(this.selected.index, 0);\n                    } else {\n                        this.selected.index += 1;\n                        this.setFocus(this.selected.index, 0);\n                    }\n                } else {\n                    // move caret to text end\n                    this.setFocus(this.selected.index, textareaLength);\n                }\n\n                return false;\n            }\n\n            // delete item\n            if (!item.empty && $event.keyCode == 46 && $event.ctrlKey && !$event.shiftKey) {\n                if ($event) { $event.stopPropagation(); }\n                if ($event) { $event.preventDefault(); }\n                this.onDeleteItem(index, item);\n\n                return false;\n            }\n\n            // check/uncheck item\n            if ($event.keyCode == 32 && $event.ctrlKey && !$event.shiftKey) {\n                if ($event) { $event.stopPropagation(); }\n                if ($event) { $event.preventDefault(); }\n                if (item) {\n                    item.checked = !item.checked\n                    this._debounceChange();\n                }\n\n                return false;\n            }\n        }\n    }\n\n    const ChecklistEdit: ng.IComponentOptions = {\n        bindings: ChecklistEditBindings,\n        templateUrl: 'checklist_edit/ChecklistEdit.html',\n        controller: ChecklistEditController\n    }\n\n    angular.module(\"pipChecklistEdit\", ['pipComposite.Templates', 'pipBehaviors'])\n        .component('pipChecklistEdit', ChecklistEdit);\n\n}\n","import { ChecklistItem } from '../data';\n{\n\n    interface IChecklistViewBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipChanged: any;\n        pipOptions: any;\n        pipRebind: any;\n    }\n\n    const ChecklistViewBindings: IChecklistViewBindings = {\n        ngDisabled: '<?',\n        pipChanged: '=?',\n        pipOptions: '=',\n        pipRebind: '<?'\n    }\n\n    class ChecklistViewBindingsChanges implements ng.IOnChangesObject, IChecklistViewBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipChanged: ng.IChangesObject<(data: ChecklistItem[]) => ng.IPromise<void>>;\n        pipOptions: ng.IChangesObject<ChecklistItem[]>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class ChecklistViewController {\n        public ngDisabled: boolean;\n        public pipChanged: Function;\n        public pipOptions: ChecklistItem[]; \n        public pipRebind: boolean;\n\n        private isChanged: boolean = false;\n\n        constructor(\n            private $element: JQuery\n        ) {\n            \"ngInject\";\n\n            if (!this.pipOptions || !_.isArray(this.pipOptions)) {\n                this.pipOptions = [];\n            }\n\n            $element.addClass('pip-checklist-view');\n\n        }\n\n        public $onChanges(changes: ChecklistViewBindingsChanges) {\n            if (this.toBoolean(this.pipRebind)) {\n                if (changes.pipOptions && changes.pipOptions.currentValue) {\n                    if (!angular.equals(this.pipOptions, changes.pipOptions.currentValue)) {\n                        if (!this.isChanged) {\n                            this.pipOptions = changes.pipOptions.currentValue;\n                        } else {\n                            this.isChanged = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        public onChecklistChange(): void {\n            this.isChanged = true;\n            if (this.pipChanged) {\n                this.pipChanged(this.pipOptions);\n            }\n        }\n\n        public onClick($event: JQueryEventObject, item: ChecklistItem): void { \n            if ($event) {\n                $event.stopPropagation();\n            }\n            if (this.ngDisabled) {\n                return;\n            }\n\n            this.onChecklistChange();\n        }\n    }\n\n    const ChecklistView: ng.IComponentOptions = {\n        bindings: ChecklistViewBindings,\n        templateUrl: 'checklist_view/ChecklistView.html',\n        controller: ChecklistViewController\n    }\n\n    angular.module(\"pipChecklistView\", ['pipComposite.Templates'])\n        .component('pipChecklistView', ChecklistView);\n\n}\n","import { ChecklistDraggEvent } from '../checklist_edit/ChecklistEdit';\nimport { CompositeFocusedEvent } from '../utilities/CompositeFocused';\nimport { ContentBlock } from '../data';\n\nlet async = require('async');\n\nexport const CompositeEmptyEvent: string = 'pipCompositeNotEmpty';\nexport const CompositeAddItemEvent: string = 'pipAddContent';\nexport const CompositeNotEmptyEvent: string = 'pipCompositeNotEmpty';\n\nexport class CompositeAddItem {\n    public id: number;\n    public type: string;\n}\n\n\nconst ConfigTranslations = (pipTranslate: pip.services.ITranslateService) => {\n    if (pipTranslate) {\n        (pipTranslate).setTranslations('en', {\n            'COMPOSITE_TITLE': 'What\\'s on your mind?',\n            'COMPOSITE_PLACEHOLDER': 'Type text ...',\n            'COMPOSITE_START_TIME': 'Start time',\n            'COMPOSITE_END_TIME': 'End time'\n        });\n        (pipTranslate).setTranslations('ru', {\n            'COMPOSITE_TITLE': 'Что у вас на уме?',\n            'COMPOSITE_PLACEHOLDER': 'Введите текст ...',\n            'COMPOSITE_START_TIME': 'Время начала',\n            'COMPOSITE_END_TIME': 'Время окончания'\n        });\n    }\n}\n\nexport class CompositeControl {\n    save: (successCallback?: (data: CompositeContent[]) => void, errorCallback?: (error: any) => void) => void;\n    abort: () => void;\n    error?: any;\n}\n\nclass SenderEvent {\n    event: CompositeControl;\n}\n\nexport class CompositeContent extends ContentBlock {\n    public empty?: boolean;\n    public documents?: pip.documents.DocumentListEditControl;\n    public pictures?: pip.pictures.PictureListEditControl;\n}\n\nexport class CompositeBlockTypes {\n    static Text: string = 'text';\n    static Pictures: string = 'pictures';\n    static Checklist: string = 'checklist';\n    static Documents: string = 'documents';\n    static Location: string = 'location';\n    static Time: string = 'time';\n    static SecondaryBlock = ['checklist', 'documents', 'location', 'time']\n    static PrimaryBlock = ['text', 'pictures']\n    static All = ['text', 'pictures', 'checklist', 'documents', 'location', 'time']\n}\n\n{\n\n    class CompositeSelected {\n        public index: number = 0;\n        public drag: boolean = true;\n        public dragId: number = 0;\n        public id: number;\n        public isChanged: boolean = false;\n        public event?: string;\n    }\n\n    interface ICompositeEditBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipChanged: any;\n        pipContents: any;\n        pipCreated: any;\n        compositeId: any;\n        pipCompositePlaceholder: any;\n        pipScrollContainer: any;\n        addedContent: any;\n        pipRebind: any;\n    }\n\n    const CompositeEditBindings: ICompositeEditBindings = {\n        ngDisabled: '<?',\n        pipChanged: '=?',\n        pipCreated: '&?',\n        pipContents: '=?',\n        compositeId: '<?pipCompositeId',\n        pipCompositePlaceholder: '<?',\n        pipScrollContainer: '<?',\n        addedContent: '<?pipAddedContent',\n        pipRebind: '<?'\n    }\n\n    class CompositeEditBindingsChanges implements ng.IOnChangesObject, ICompositeEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipChanged: ng.IChangesObject<() => ng.IPromise<void>>;\n        pipCreated: ng.IChangesObject<(event: SenderEvent) => ng.IPromise<void>>;\n        pipContents: ng.IChangesObject<CompositeContent[]>;\n        compositeId: ng.IChangesObject<number>;\n        pipCompositePlaceholder: ng.IChangesObject<string>;\n        pipScrollContainer: ng.IChangesObject<string>;\n        addedContent: ng.IChangesObject<boolean>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class CompositeEditController implements ICompositeEditBindings {\n        private defaultPlaceholder: string = 'COMPOSITE_PLACEHOLDER';\n        private CONTENT_TYPES: string[] = CompositeBlockTypes.All;\n        private cleanupCompositeEvent: any;\n        private cleanupCompositeFocusedEvent: any;\n        private cleanupChecklistDraggEvent: any;\n        private _debounceChange: any;\n\n        public ngDisabled: boolean;\n        public pipChanged: Function;\n        public pipCreated: (event: SenderEvent) => void;\n        public pipContents: CompositeContent[];\n        public compositeId: number;\n        public pipCompositePlaceholder: string;\n        public pipScrollContainer: string;\n        public addedContent: string;\n        public pipRebind: boolean;\n\n        public compositeContent: CompositeContent[];\n        public selected: CompositeSelected;\n        public isFirst: boolean;\n        public compositePlaceholder: string;\n\n        public control: CompositeControl;\n\n        constructor(\n            private $q,\n            private $element: JQuery,\n            private $timeout: ng.ITimeoutService,\n            private $document,\n            private $rootScope: ng.IRootScopeService,\n            private pipTranslate: pip.services.ITranslateService\n\n        ) {\n            \"ngInject\";\n\n            this.selected = new CompositeSelected();\n            this.selected.id = this.now();\n\n            $element.addClass('pip-composite-edit');\n\n            this.generateList(this.pipContents);\n            this.setPlaceholder();\n            this.control = {\n                save: (successCallback?: (data: CompositeContent[]) => void, errorCallback?: (error: any) => void) => {\n                    this.saveContent(successCallback, errorCallback);\n                },\n                abort: () => {\n                    this.abortContent();\n                },\n                error: null\n            };\n            this.executeCallback();\n\n            this.cleanupCompositeEvent = this.$rootScope.$on(CompositeAddItemEvent,\n                (event: ng.IAngularEvent, args: CompositeAddItem) => {\n                    if (this.compositeId) {\n                        if (args.id && args.id == this.compositeId) {\n                            this.addItem(args.type);\n                        }\n                    } else {\n                        this.addItem(args.type);\n                    }\n                });\n\n            this.cleanupChecklistDraggEvent = this.$rootScope.$on(ChecklistDraggEvent, () => {\n                this.selected.drag = false;\n                this.$timeout(() => {\n                    this.selected.drag = false;\n                }, 0);\n            });\n\n            this.cleanupCompositeFocusedEvent = this.$rootScope.$on(CompositeFocusedEvent, () => {\n                if (this.isFirst) {\n                    this.$timeout(() => {\n                        let nextElement = angular.element('#composite-item-text-' + this.selected.id + '-0');\n                        if (nextElement && !nextElement.is(':focus')) {\n                            nextElement.focus();\n                        }\n                    }, 50);\n                }\n            });\n\n            this._debounceChange = _.debounce(() => {\n                this.onCompositeChange();\n            }, 200);\n        }\n\n        private abortContent(): void {\n            _.each(this.compositeContent, (item: CompositeContent) => {\n                if (item.pictures && item.pictures.abort) {\n                    item.pictures.abort();\n                } else if (item.documents && item.documents.abort) {\n                    item.documents.abort();\n                }\n            });\n        }\n\n        private getPicIdsArray(data: pip.pictures.Attachment[]): string[] {\n            let result: string[] = [];\n\n            _.each(data, (item: pip.pictures.Attachment) => {\n                if (item.id) {\n                    result.push(item.id);\n                }\n            });\n\n            return result;\n        }\n\n        private saveContent(successCallback?: (data: CompositeContent[]) => void, errorCallback?: (error: any) => void, abortFirstError?: boolean): void {\n            let content: CompositeContent[];\n            content = _.cloneDeep(this.compositeContent);\n            let saveFirstError: any = null;\n\n            async.eachOf(this.compositeContent,\n                (item, index, callback) => {\n                    if (item.pictures && item.pictures.save) {\n                        item.pictures.save(\n                            (data: pip.pictures.Attachment[]) => {\n                                delete item.picIds;\n                                item.pic_ids = this.getPicIdsArray(data);\n                                callback();\n                            },\n                            (error: any) => {\n                                saveFirstError = saveFirstError ? saveFirstError : error;\n                                if (abortFirstError) {\n                                    callback(error);\n                                } else {\n                                    callback();\n                                }\n                            }\n                        );\n                    } else if (item.documents && item.documents.save) {\n                        item.documents.save(\n                            (data: pip.documents.Attachment[]) => {\n                                item.docs = data;\n                                callback();\n                            },\n                            (error: any) => {\n                                saveFirstError = saveFirstError ? saveFirstError : error;\n                                if (abortFirstError) {\n                                    callback(error);\n                                } else {\n                                    callback();\n                                }\n                            }\n                        );\n                    } else {\n                        callback();\n                    }\n                },\n                (error, result) => {\n                    if (error || saveFirstError) {\n                        if (abortFirstError) {\n                            this.abortContent();\n                        } \n                        this.compositeContent = content;\n                        if (errorCallback) errorCallback(error);\n                    } else {\n                        this.onCompositeChange();\n                        if (successCallback) successCallback(this.pipContents);\n                    }\n                });\n        }\n\n        public $onDestroy() {\n            if (angular.isFunction(this.cleanupCompositeEvent)) {\n                this.cleanupCompositeEvent();\n            }\n            if (angular.isFunction(this.cleanupChecklistDraggEvent)) {\n                this.cleanupChecklistDraggEvent();\n            }\n            if (angular.isFunction(this.cleanupCompositeFocusedEvent)) {\n                this.cleanupCompositeFocusedEvent();\n            }\n        }\n\n        public $onChanges(changes: CompositeEditBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n                if (this.pipRebind && changes.pipContents && _.isArray(changes.pipContents.currentValue)) {\n                    if (!this.selected.isChanged || (this.pipContents\n                        && this.pipContents.length != this.compositeContent.length)) {\n                        this.generateList(this.pipContents);\n                        this.selected.isChanged = false;\n                    }\n                }\n            }\n\n            if (changes.ngDisabled && changes.ngDisabled.currentValue !== changes.ngDisabled.previousValue) {\n                this.ngDisabled = changes.ngDisabled.currentValue;\n            }\n\n            if (changes.pipCompositePlaceholder && changes.pipCompositePlaceholder.currentValue !== changes.pipCompositePlaceholder.previousValue) {\n                this.pipCompositePlaceholder = changes.pipCompositePlaceholder.currentValue;\n                this.setPlaceholder();\n            }\n        }\n\n        private executeCallback() {\n            // Execute callback\n            if (this.pipCreated) {\n                this.pipCreated({\n                    event: this.control\n                });\n            }\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) { return false; }\n            if (!value) { return false; }\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        private getEmptyItem(): CompositeContent {\n            let emptyItem: CompositeContent = {\n                empty: true,\n                id: this.getId(),\n                type: 'text',\n                text: '', docs: [], pic_ids: [], loc_pos: null, loc_name: '',\n                start: null, end: null, checklist: []\n            }\n\n            return emptyItem;\n        }\n\n\n        private setPlaceholder(): void {\n            this.compositePlaceholder =\n                (this.pipCompositePlaceholder === undefined || this.pipCompositePlaceholder === null) ?\n                    this.pipTranslate.translate(this.defaultPlaceholder) :\n                    this.pipTranslate.translate(this.pipCompositePlaceholder);\n        }\n\n        private addItem(contentType: string, value?: any): void {\n            if (_.indexOf(this.CONTENT_TYPES, contentType) < 0) return;\n\n            // generate new item\n            var newItem: CompositeContent = {\n                id: this.getId(),\n                type: contentType,\n                text: contentType == 'text' ? value : '',\n                docs: contentType == 'documents' && value ? value : [],\n                pic_ids: contentType == 'pictures' && value ? value : [],\n                loc_pos: contentType == 'location' && value ? value.loc_pos : null,\n                loc_name: contentType == 'location' && value ? value.loc_name : '',\n                start: contentType == 'time' && value ? value.start : null,\n                end: contentType == 'time' && value ? value.end : null,\n                checklist: contentType == 'checklist' && value ? value : []\n            };\n\n            // calculate current index\n            let index: number = _.findIndex(this.compositeContent, { id: this.selected.index });\n            index = index < 0 ? 0 : index;\n\n            // insert new element and select it\n            if (this.compositeContent.length == 1 && this.compositeContent[0].empty) {\n                this.compositeContent[0] = newItem;\n            } else {\n                this.compositeContent.splice(index + 1, 0, newItem);\n                index += 1;\n            }\n\n            // insert new element and select it\n            this.selected.index = newItem.id;\n            this.onSelect();\n\n            // focus to new element\n            setTimeout(this.scrollTo(this.pipScrollContainer, '#composite-item-' + this.selected.id + '-' + index), 1000);\n\n            // set toolbar\n            this.isFirst = false;\n            this.setToolbar();\n            this._debounceChange();\n        }\n\n        private getId(): number {\n            let id: number = -1;\n            _.each(this.compositeContent, (item: CompositeContent) => {\n                if (id < item.id) id = item.id;\n            });\n\n            return id + 1;\n        }\n\n        private scrollTo(parentElement: any, childElement: any): void {\n            if (!parentElement || !childElement) { return; }\n\n            setTimeout(() => {\n                if (!$(childElement).position()) { return; }\n\n                let modDiff: number = Math.abs($(parentElement).scrollTop() - $(childElement).position().top);\n                if (modDiff < 20) { return; }\n\n                let scrollTo: number = $(parentElement).scrollTop() + ($(childElement).position().top - 20);\n                $(parentElement).animate({\n                    scrollTop: scrollTo + 'px'\n                }, 300);\n            }, 100);\n        }\n\n        private getPicIds(ids: string[]): pip.pictures.Attachment[] {\n            let result: pip.pictures.Attachment[] = [];\n\n            _.each(ids, (id: string) => {\n                let item: pip.pictures.Attachment = {\n                    id: id\n                }\n\n                result.push(item);\n            })\n\n            return result;\n        }\n\n        private generateList(content: CompositeContent[]): void {\n            if (!content || content.length < 1) {\n                this.clearList();\n\n                return;\n            } else {\n                this.compositeContent = [];\n                _.each(content, (item: CompositeContent) => {\n                    item.id = this.getId();\n                    item.picIds = item.pic_ids ? this.getPicIds(item.pic_ids) : null;\n                    this.compositeContent.push(item);\n                });\n                this.isFirst = false;\n            }\n\n            this.setToolbar();\n        }\n\n        private setToolbar(): void {\n            if (this.compositeContent.length > 2) { return; }\n\n            this.$rootScope.$emit(CompositeNotEmptyEvent, !this.isFirst);\n        }\n\n        private clearList(): void {\n            this.compositeContent = [];\n\n            this.compositeContent.push(this.getEmptyItem());\n            this.isFirst = true;\n        }\n\n        private now(): number {\n            return +new Date;\n        }\n\n        private updateContents(): void {\n            this.selected.isChanged = true;\n            this.pipContents = this.compositeContent;\n        }\n\n        private getParentIndex(el: any): number {\n            if (el.length < 1) return null;\n            let elParent = el.parent();\n            if (elParent[0] && elParent[0].id && elParent[0].id.indexOf('composite-item-' + this.selected.id) > -1) {\n                let strs = elParent[0].id.split('-');\n\n                let parentIndex: number = parseInt(strs[strs.length - 1], 10);\n                return parentIndex;\n            } else {\n                return this.getParentIndex(elParent);\n            }\n        }\n\n        // ---------------- public\n\n        public isActiveChecklist(obj: CompositeContent): boolean {\n            // return obj.id == this.selected.index;\n            return obj.id == this.selected.id;\n        }\n\n        public onKeyUp($event: KeyboardEvent): void {\n            if ($event.keyCode == 9) {\n                this.$timeout(() => {\n                    let focusedElement = angular.element(this.$document[0].activeElement);\n                    let parentIndex: number = this.getParentIndex(focusedElement);\n                    if (parentIndex != null) {\n                        this.selected.index = parentIndex;\n                    }\n                    // ??? index = id\n                    this.selected.index = this.compositeContent[parentIndex].id;\n                }, 50);\n            }\n        }\n\n        public onKeyDown($event: KeyboardEvent, index: number, item: CompositeContent): void {\n            if (this.ngDisabled) { return; }\n            // delete item\n            if (item && !item.empty && $event.keyCode == 46 && !$event.ctrlKey && $event.shiftKey) {\n                if ($event) {\n                    $event.stopPropagation();\n                    $event.preventDefault();\n                }\n                if (index > -1) {\n                    this.onDeleteItem(index);\n                }\n            }\n        }\n\n        public onCompositeChange(): void {\n            this.updateContents();\n            if (this.pipChanged) {\n                this.pipChanged(this.pipContents);\n            }\n        }\n\n        public onDeleteItem(index: number): void {\n            if (index < 0 || this.compositeContent.length == 0) return;\n\n            // delete last element in composite\n            if (this.compositeContent.length == 1) {\n                this.compositeContent[0] = this.getEmptyItem();\n                this.selected.index = this.compositeContent[0].id;\n                this.onSelect(0);\n                this.isFirst = true;\n                this.setToolbar();\n            } else {\n                if (index >= 0 && index < this.compositeContent.length) {\n                    this.compositeContent.splice(index, 1);\n                }\n                if (index == this.compositeContent.length) {\n                    this.selected.index = this.compositeContent[this.compositeContent.length - 1].id;\n                } else {\n                    this.selected.index = this.compositeContent[index].id;\n                }\n                this.onSelect();\n            }\n\n            this.setToolbar();\n            this._debounceChange();\n        }\n\n        public onContentChange(obj: any): void { //CompositeContent\n            if (obj && obj.empty && obj.text) {\n                obj.empty = false;\n                this.isFirst = false;\n                this.setToolbar();\n            }\n            if (!this.ngDisabled) {\n                this._debounceChange();\n            }\n        }\n\n        public isSelectedSection(index: number, obj: CompositeContent): boolean {\n            return this.selected.index == obj.id && !obj.empty;\n        }\n\n        public onDraggEnd(): void {\n            this.selected.drag = true;\n        }\n\n        public onStart(id: number): void {\n            if (id && id != this.selected.dragId) {\n                this.selected.drag = false;\n            }\n        }\n\n        public onStop(id: number): void {\n            this.$timeout(() => {\n                this.selected.drag = true;\n                this.selected.dragId = 0;\n            }, 500);\n        }\n\n        public onDownDragg($event: ng.IAngularEvent, obj: CompositeContent) {\n            if (this.ngDisabled) return;\n            this.selected.dragId = this.selected.id;\n            this.selected.drag = true;\n            this.selected.index = obj.id;\n        }\n\n        public onClick($event: JQueryEventObject, index: number, obj: CompositeContent): void {\n            if (this.ngDisabled) { return; }\n\n            this.selected.event = 'onClick';\n            if ($event && $event.target && $event.target.tagName &&\n                ($event.target.tagName == 'INPUT' || $event.target.tagName == 'TEXTAREA')) {\n                this.selected.index = obj.id;\n\n                return;\n            }\n\n            if ((this.selected.index == obj.id && obj.type == 'checklist' && obj.checklist.length > 0) ||\n                (this.selected.index == obj.id && obj.type == 'location')) { return; }\n\n            this.selected.index = obj.id;\n            this.onSelect();\n        }\n\n        public onDropComplete(placeIndex: number, obj: CompositeContent, event: JQueryEventObject, componentId: number): void {\n            if (componentId != this.selected.id || !obj || !obj.type) {\n                this.compositeContent = _.cloneDeep(this.pipContents);\n\n                return;\n            }\n\n            let index: number = placeIndex;\n            let tmpIndex: number = _.findIndex(this.compositeContent, { id: obj.id }); //this.selected.index});\n            let i: number;\n\n            if (!(tmpIndex == 0 && placeIndex == 1)) {\n                if (tmpIndex > index) {\n                    if (index > this.compositeContent.length - 1) index = this.compositeContent.length - 1;\n                    // move up\n                    for (i = 0; i < tmpIndex - index; i++) {\n                        this.compositeContent[tmpIndex - i] = this.compositeContent[tmpIndex - i - 1];\n                    }\n                    this.compositeContent[index] = obj;\n                }\n                if (tmpIndex < index) {\n                    index -= 1;\n                    //move down\n                    for (i = 0; i < index - tmpIndex; i++) {\n                        this.compositeContent[tmpIndex + i] = this.compositeContent[tmpIndex + i + 1];\n                    }\n                    this.compositeContent[index] = obj;\n                }\n                this.selected.index = this.compositeContent[index].id;\n            }\n\n            this.onSelect();\n            this._debounceChange();\n        }\n\n        public onSelect(index?: number): void {\n            if (!index) {\n                index = _.findIndex(this.compositeContent, { id: this.selected.index });\n            }\n            if (index < 0) { return; }\n\n            let item: CompositeContent = this.compositeContent[index];\n            if (_.isEmpty(item)) { return; }\n\n            let nextElement;\n            switch (item.type) {\n                //case 'text':\n                //        setTimeout(() => {\n                //            var nextElement = angular.element('#composite-item-text-' + this.selected.id + '-' + index);\n                //            //var nextElement = angular.element('#composite-item-text-' + this.selected.id + '-' + this.selected.index);\n                //            if (nextElement && !nextElement.is(':focus')) nextElement.focus();\n                //            //this.selected.stopKey = false;\n                //        },  50);\n                //    break;\n                case 'pictures':\n                    setTimeout(() => {\n                        nextElement = angular.element(\n                            '#composite-item-' + this.selected.id + '-' + index + ' button.pip-picture-upload');\n                        if (nextElement && !nextElement.is(':focus')) {\n                            nextElement.focus();\n                        }\n                    }, 50);\n                    break;\n                case 'documents':\n                    setTimeout(() => {\n                        nextElement = angular.element(\n                            '#composite-item-' + this.selected.id + '-' + index + ' button.pip-document-upload');\n                        if (nextElement && !nextElement.is(':focus')) {\n                            nextElement.focus();\n                        }\n                    }, 50);\n                    break;\n                //case 'checklist':\n                //        setTimeout(() => {\n                //            var nextElement = angular.element(\n                //                '#composite-item-' + this.selected.id + '-' + index + ' textarea[id^=\\'empty-item-\\'');\n                //            if (nextElement && !nextElement.is(':focus')) nextElement.focus();\n                //            //this.selected.stopKey = false;\n                //        },  50);\n                //    break;\n                case 'location':\n                    setTimeout(() => {\n                        nextElement = angular.element(\n                            '#composite-item-' + this.selected.id + '-' + index + ' .pip-location-empty  button');\n                        if (nextElement && !nextElement.is(':focus')) {\n                            nextElement.focus();\n                        }\n                    }, 50);\n                    break;\n                case 'time':\n                    break;\n            }\n        }\n\n        // set element responsive width when element places\n        //public setWidth100(index: number): void {\n        //    let element = angular.element('#composite-item-' + this.selected.id + '-' + index);\n        //    element.css( \"width\", 'none');\n        //    element.css( \"max-width\", 'none');\n        //};\n        //\n        //// set draggable element width when your dragg\n        //public setWidth(index: number): void {\n        //    if (this.selected.isWidth) return;\n        //    let elementEtalon = angular.element('#pip-composite-last-' + + this.selected.id);\n        //    let value = elementEtalon.width();\n        //    let element = angular.element('#composite-item-' + this.selected.id + '-' + index);\n        //    if (element) {\n        //        element.css(\"width\", value + 'px');\n        //        element.css(\"max-width\", value + 'px');\n        //    }\n        //};\n\n    }\n\n    const CompositeEdit: ng.IComponentOptions = {\n        bindings: CompositeEditBindings,\n        templateUrl: 'composite_edit/CompositeEdit.html',\n        controller: CompositeEditController\n    }\n\n    angular.module(\"pipCompositeEdit\", ['pipDocuments', 'pipLocations', 'pipPictures', 'pipDates', 'pipComposite.Templates'])\n        .run(ConfigTranslations)\n        .component('pipCompositeEdit', CompositeEdit);\n\n}\n\n\n","import { CompositeBlockTypes } from '../composite_edit/CompositeEdit';\nimport { ContentBlock, ChecklistItem } from '../data';\n{\n\n    interface ICompositeSummaryBindings {\n        [key: string]: any;\n\n        pipContents: any;\n        pipChecklistSize: any;\n        pipTextSize: any;\n        pipPrimaryBlockLimit: any;\n        pipSecondaryBlockLimit: any;\n        pipSecondaryBlockTypes: any;\n        pipRebind: any;\n    }\n\n    const CompositeSummaryBindings: ICompositeSummaryBindings = {\n\n        pipContents: '<?',\n        pipChecklistSize: '<?',\n        pipTextSize: '<?',\n        pipPrimaryBlockLimit: '<?',\n        pipSecondaryBlockLimit: '<?',\n        pipSecondaryBlockTypes: '<?',\n        pipRebind: '<?'\n    }\n\n    class CompositeSummaryBindingsChanges implements ng.IOnChangesObject, ICompositeSummaryBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipContents: ng.IChangesObject<ContentBlock[]>;\n        pipChecklistSize: ng.IChangesObject<number>;\n        pipTextSize: ng.IChangesObject<number>;\n        pipPrimaryBlockLimit: ng.IChangesObject<number>;\n        pipSecondaryBlockLimit: ng.IChangesObject<number>;\n        pipSecondaryBlockTypes: ng.IChangesObject<string[]>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class CompositeSummaryController {\n        public pipContents: ContentBlock[];\n        public pipChecklistSize: number;\n        public pipTextSize: number;\n        public pipPrimaryBlockLimit: number;\n        public pipSecondaryBlockLimit: number;\n        public pipSecondaryBlockTypes: string[];\n        public pipRebind: boolean;\n\n        public compositeContent: ContentBlock[];\n\n        public disableControl: boolean = true;\n        public disabledChecklist: boolean = true;\n\n        constructor(\n            private $element: JQuery\n        ) {\n            \"ngInject\";\n\n            $element.addClass('pip-composite-summary');\n\n            this.pipChecklistSize = this.pipChecklistSize ? this.pipChecklistSize : 0;\n            this.pipTextSize = this.pipTextSize ? this.pipTextSize : 0;\n            this.pipPrimaryBlockLimit = this.pipPrimaryBlockLimit === undefined || this.pipPrimaryBlockLimit === null ? -1 : this.pipPrimaryBlockLimit;\n            this.pipSecondaryBlockLimit = this.pipSecondaryBlockLimit === undefined || this.pipSecondaryBlockLimit === null ? -1 : this.pipSecondaryBlockLimit;\n            this.pipSecondaryBlockTypes = this.pipSecondaryBlockTypes && _.isArray(this.pipSecondaryBlockTypes) ? this.pipSecondaryBlockTypes : CompositeBlockTypes.SecondaryBlock;\n\n            this.generateList(this.pipContents);\n        }\n\n        public $onChanges(changes: CompositeSummaryBindingsChanges) {\n            if (this.toBoolean(this.pipRebind)) {\n                if (changes.pipContents && changes.pipContents.currentValue) {\n                    if (!angular.equals(this.pipContents, changes.pipContents.currentValue)) {\n                        this.generateList(this.pipContents);\n                    }\n                }\n            }\n        }\n\n        private getPicIds(ids: string[]): pip.pictures.Attachment[] {\n            let result: pip.pictures.Attachment[] = [];\n\n            _.each(ids, (id: string) => {\n                let item: pip.pictures.Attachment = {\n                    id: id\n                }\n\n                result.push(item);\n            })\n\n            return result;\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n\n        // limit cacklist position\n        public limitChecklist(content: ContentBlock[], val: number): void {\n            if (!val) return;\n            let ellapsed: ChecklistItem = {\n                text: '...',\n                checked: false\n            };\n            _.each(content, (item: ContentBlock) => {\n                if (item && item.type == CompositeBlockTypes.Checklist) {\n                    let checklistLength: number = item.checklist.length;\n                    item.checklist = _.take(item.checklist, val);\n                    if (checklistLength > val) {\n                        item.checklist.push(ellapsed);\n                    }\n                }\n            });\n        };\n\n        // choose primary blocks (text and picture)\n        public selectSummary(content: ContentBlock[]): ContentBlock[] {\n            let result: ContentBlock[] = [];\n            let i: number;\n\n            _.each(content, (item: ContentBlock) => {\n                if (this.pipPrimaryBlockLimit >= 0 && i >= this.pipPrimaryBlockLimit) {\n                    return result;\n                }\n                //if (item.type == 'text' || item.type == 'pictures' ) {\n                if (this.pipSecondaryBlockTypes.indexOf(item.type) < 0) {\n                    result.push(item);\n                    i += 1;\n                }\n            });\n\n            return result;\n        }\n\n        // отбираем остальные блоки если они есть\n        public selectSummarySecondary(content: ContentBlock[], types: string[]): ContentBlock[] {\n            let i: number;\n            let limit: number = this.pipSecondaryBlockLimit < 0 ? content.length : this.pipSecondaryBlockLimit;\n            let result: ContentBlock[] = [];\n\n            for (i; i < content.length; i++) {\n                if (types.indexOf(content[i].type) > -1) {\n                    result.push(content[i]);\n                    if (result.length >= limit) {\n                        break;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        public generateList(content: ContentBlock[]): void {\n            if (!content || content.length < 1) {\n                this.clearList();\n\n                return;\n            } else {\n                let summaryContent: ContentBlock[] = _.cloneDeep(content);\n                let result: ContentBlock[] = this.selectSummary(summaryContent);\n                if (result.length == 0) {\n                    result = this.selectSummarySecondary(summaryContent, this.pipSecondaryBlockTypes);\n                }\n\n                this.limitChecklist(result, this.pipChecklistSize);\n\n                let id: number;\n                _.each(result, (item: ContentBlock) => {\n                    item.id = id;\n                    item.picIds = item.pic_ids ? this.getPicIds(item.pic_ids) : null;\n                    id++;\n                });\n                this.compositeContent = result;\n            }\n        }\n\n        public clearList() {\n            this.compositeContent = [];\n        }\n    }\n\n    const CompositeSummary: ng.IComponentOptions = {\n        bindings: CompositeSummaryBindings,\n        templateUrl: 'composite_summary/CompositeSummary.html',\n        controller: CompositeSummaryController\n    }\n\n    angular.module(\"pipCompositeSummary\", ['pipDocuments', 'pipLocations', 'pipPictures', 'pipDates', 'pipComposite.Templates'])\n        .component('pipCompositeSummary', CompositeSummary);\n\n}\n\n","import { CompositeEmptyEvent, CompositeAddItemEvent } from '../composite_edit/CompositeEdit';\n\nexport class CompositeAddItemEventParams {\n    public type: string;\n    public id: string;\n}\n\nexport class CompositeToolbarButton {\n    public picture: boolean = true;\n    public document: boolean = true;\n    public location: boolean = true;\n    public event: boolean = true;\n    public checklist: boolean = true;\n    public text: boolean = true;\n}\n\n{\n    const translateConfig = function (pipTranslateProvider) {\n        pipTranslateProvider.translations('en', {\n            'TEXT': 'Text',\n            'CHECKLIST': 'Checklist',\n            'LOCATION': 'Location',\n            'PICTURE': 'Picture',\n            'TIME': 'Time',\n            'DOCUMENT': 'Document'\n        });\n\n        pipTranslateProvider.translations('ru', {\n            'TEXT': 'Текст',\n            'CHECKLIST': 'Список',\n            'LOCATION': 'Локация',\n            'PICTURE': 'Изображение',\n            'TIME': 'Время',\n            'DOCUMENT': 'Document'\n        });\n    }\n\n    interface ICompositeToolbarBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        emptyState: any;\n        pipToolbarButton: any;\n        compositeId: any;\n    }\n\n    const CompositeToolbarBindings: ICompositeToolbarBindings = {\n        ngDisabled: '<?',\n        emptyState: '<?pipCompositeEmpty', // Set init state of toolbar\n        pipToolbarButton: '=?', // Set visibility of toolbar button, true by default\n        compositeId: '=?pipCompositeId', // Set pip-composite-id, for several composite components in one scope\n    }\n\n    class CompositeToolbarBindingsChanges implements ng.IOnChangesObject, ICompositeToolbarBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject< boolean >;\n        emptyState: ng.IChangesObject< boolean >;\n        pipToolbarButton: ng.IChangesObject<CompositeToolbarButton>;;\n        compositeId: ng.IChangesObject<string>;\n    }\n\n    class CompositeToolbarController {\n        private cleanupCompositeEvent: any;\n\n        public toolbarButton: CompositeToolbarButton;\n\n        public ngDisabled: boolean;\n        public emptyState: boolean;\n        public pipToolbarButton: CompositeToolbarButton;\n        public compositeId: string;\n\n        constructor(\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery\n        ) {\n\"ngInject\";\n\n            this.toolbarButton = new CompositeToolbarButton();\n\n            this.setOption();\n\n            $element.addClass('pip-composite-toolbar');\n\n            this.cleanupCompositeEvent = this.$rootScope.$on(CompositeEmptyEvent, (event: ng.IAngularEvent, value: boolean) => {\n                this.emptyState = !value;\n            });\n        }\n\n        public $onDestroy() {\n            if (angular.isFunction(this.cleanupCompositeEvent)) {\n                this.cleanupCompositeEvent();\n            }\n        }\n\n        public $onChanges(changes: CompositeToolbarBindingsChanges) {\n            if (changes.pipToolbarButton && changes.pipToolbarButton.currentValue) {\n                this.setOption();\n            }\n        }\n\n        public toBoolean(value: any): boolean {\n            if (value == null) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        public onAddItem(contentType: string): void {\n            let params: CompositeAddItemEventParams = {\n                type: contentType,\n                id: this.compositeId\n            };\n\n            this.$rootScope.$emit(CompositeAddItemEvent, params);\n        };\n\n        public setOption(): void {\n            _.assign(this.pipToolbarButton, this.pipToolbarButton);\n            this.toolbarButton.text = true;\n            // if (this.pipToolbarButton !== null && this.pipToolbarButton !== undefined) {\n            //     this.toolbarButton.picture = this.pipToolbarButton.picture === false ? this.pipToolbarButton.picture : true;\n            //     this.toolbarButton.document = this.pipToolbarButton.document === false ? this.pipToolbarButton.document : true;\n            //     this.toolbarButton.location = this.pipToolbarButton.location === false ? this.pipToolbarButton.location : true;\n            //     this.toolbarButton.event = this.pipToolbarButton.event === false ? this.pipToolbarButton.event : true;\n            //     this.toolbarButton.checklist = this.pipToolbarButton.checklist === false ? this.pipToolbarButton.checklist : true;\n            // } else {\n            //     this.toolbarButton.picture = true;\n            //     this.toolbarButton.document = true;\n            //     this.toolbarButton.location = true;\n            //     this.toolbarButton.event = true;\n            //     this.toolbarButton.checklist = true;\n            // }\n            // this.toolbarButton.text = true;\n        };\n    }\n\n\n    const CompositeToolbar: ng.IComponentOptions = {\n        bindings: CompositeToolbarBindings,\n        templateUrl: 'composite_toolbar/CompositeToolbar.html',\n        controller: CompositeToolbarController\n    }\n\n    angular.module(\"pipCompositeToolbar\", ['pipComposite.Templates'])\n        .config(translateConfig)\n        .component('pipCompositeToolbar', CompositeToolbar);\n\n}","import { ContentBlock } from '../data';\n{\n    interface ICompositeViewBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipDisabledChecklist: any;\n        pipChanged: any;\n        pipContents: any;\n        pipRebind: any;\n    }\n\n    const CompositeViewBindings: ICompositeViewBindings = {\n        ngDisabled: '<?',\n        pipDisabledChecklist: '<?',\n        pipChanged: '=?',\n        pipContents: '=?',\n        pipRebind: '<?'\n    }\n\n    class CompositeViewBindingsChanges implements ng.IOnChangesObject, ICompositeViewBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipDisabledChecklist: ng.IChangesObject<boolean>;\n        pipChanged: ng.IChangesObject<() => ng.IPromise<void>>;\n        pipContents: ng.IChangesObject<ContentBlock[]>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class CompositeViewController implements ICompositeViewBindings {\n        public ngDisabled: boolean;\n        public pipDisabledChecklist: boolean;\n        public pipChanged: Function;\n        public pipContents: ContentBlock[];\n        public pipRebind: boolean;\n\n        public compositeContent: ContentBlock[];\n\n        private selected: any = {};\n\n        constructor(\n            private $element: JQuery,\n            private $attrs: ng.IAttributes\n        ) {\n            \"ngInject\";\n\n            $element.addClass('pip-composite-view');\n            this.selected.isChanged = false;\n            this.pipContents = _.isArray(this.pipContents) ? this.pipContents : [];\n\n            this.generateList(this.pipContents);\n        }\n\n        public $onChanges(changes: CompositeViewBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n                if (this.pipRebind && changes.pipContents && _.isArray(changes.pipContents.currentValue)) {\n                    this.selected.isChanged === true ? this.selected.isChanged = false : this.generateList(changes.pipContents.currentValue);\n                }\n            }\n\n            if (changes.ngDisabled && changes.ngDisabled.currentValue !== changes.ngDisabled.previousValue) {\n                this.ngDisabled = changes.ngDisabled.currentValue;\n            }\n\n            if (changes.pipDisabledChecklist && changes.pipDisabledChecklist.currentValue !== changes.pipDisabledChecklist.previousValue) {\n                this.pipDisabledChecklist = changes.pipDisabledChecklist.currentValue;\n            }\n        }\n        \n        private getPicIds(ids: string[]): pip.pictures.Attachment[] {\n            let result: pip.pictures.Attachment[] = [];\n\n            _.each(ids, (id: string) => {\n                let item: pip.pictures.Attachment = {\n                    id: id\n                }\n\n                result.push(item);\n            })\n\n            return result;\n        }\n\n        private updateContents(): void {\n            this.selected.isChanged = true;\n            this.pipContents = this.compositeContent;\n        }\n\n        public isDisabled(): boolean {\n            return this.pipDisabledChecklist === true || this.ngDisabled === true;\n        }\n\n        public onContentChange(): void {\n            this.updateContents();\n            if (this.pipChanged) {\n                this.pipChanged(this.pipContents);\n            }\n        }\n\n        public onCompositeChange(): void {\n            this.updateContents();\n            if (this.pipChanged)\n                this.pipChanged(this.pipContents);\n        }\n\n        private generateList(content: ContentBlock[]): void {\n            if (!content || content.length < 1) {\n                this.clearList();\n                return;\n            } else {\n                this.compositeContent = [];\n                let id: number = 0;\n                _.each(content, (item: ContentBlock) => {\n                    if (typeof (item) != 'object' || item == null) {\n                        throw new Error('Error: content error!');\n                    }\n                    item.id = id;\n                    item.picIds = item.pic_ids ? this.getPicIds(item.pic_ids) : null;\n                    id++;\n                    this.compositeContent.push(item);\n                });\n            }\n        }\n\n        private clearList(): void {\n            this.compositeContent = [];\n        }\n    }\n\n    const CompositeView: ng.IComponentOptions = {\n        bindings: CompositeViewBindings,\n        templateUrl: 'composite_view/CompositeView.html',\n        controller: CompositeViewController\n    }\n\n    angular.module(\"pipCompositeView\", ['pipDocuments', 'pipLocations', 'pipPictures', 'pipDates', 'pipComposite.Templates', 'pipEmbeddedView'])\n        .component('pipCompositeView', CompositeView);\n\n}","{\n    interface IContentSwitchAttributes extends angular.IAttributes {\n        pipParentElementName: any;\n    }\n\n    interface IContentSwitchScope extends angular.IScope {\n        onButtonClick: any;\n        contentSwitchOption: any;\n        showIconPicture: any;\n        showIconDocument: any;\n        showIconEvent: any;\n        showIconLocation: any;\n        showEvent: any;\n        showDocuments: any;\n        showLocation: any;\n        showPictures: any;\n    }\n\n    class ContentSwitchLink {\n        private parentElementNameGetter: any;\n        private parentElement: any;\n\n        constructor(\n            private $parse: ng.IParseService,\n            private $scope: IContentSwitchScope,\n            private $element: JQuery,\n            private $attrs: IContentSwitchAttributes\n        ) {\n            \"ngInject\";\n            \n            this.parentElementNameGetter = $parse($attrs.pipParentElementName);\n            this.parentElement = this.parentElementNameGetter($scope);\n            this.setOption();\n        }\n\n        private scrollTo(childElement): void {\n            setTimeout(() => {\n                let modDiff: number = Math.abs($(this.parentElement).scrollTop() - $(childElement).position().top);\n                if (modDiff < 20) {\n                    return;\n                }\n                let scrollTo = $(this.parentElement).scrollTop() + ($(childElement).position().top - 20);\n                $(this.parentElement).animate({\n                    scrollTop: scrollTo + 'px'\n                }, 300);\n            }, 100);\n        };\n\n        private setOption(): void {\n            // todo\n            if (this.$scope.contentSwitchOption !== null && this.$scope.contentSwitchOption !== undefined) {\n                this.$scope.showIconPicture = this.$scope.contentSwitchOption.picture ? this.$scope.contentSwitchOption.picture : this.$scope.showIconPicture;\n                this.$scope.showIconDocument = this.$scope.contentSwitchOption.document ? this.$scope.contentSwitchOption.document : this.$scope.showIconDocument;\n                this.$scope.showIconLocation = this.$scope.contentSwitchOption.location ? this.$scope.contentSwitchOption.location : this.$scope.showIconLocation;\n                this.$scope.showIconEvent = this.$scope.contentSwitchOption.event ? this.$scope.contentSwitchOption.event : this.$scope.showIconEvent;\n            } else {\n                this.$scope.showIconPicture = true;\n                this.$scope.showIconDocument = true;\n                this.$scope.showIconLocation = true;\n                this.$scope.showIconEvent = true;\n            }\n        };\n\n        public onButtonClick(type: string): void {\n            if (!this.parentElement) return;\n\n            switch (type) {\n                case 'event':\n                    // On Event click action\n                    if (this.$scope.showEvent)\n                        scrollTo('.event-edit');\n                    break;\n                case 'documents':\n                    // On Documents click action\n                    if (this.$scope.showDocuments)\n                        scrollTo('.pip-document-list-edit');\n                    break;\n                case 'pictures':\n                    // On Pictures click action\n                    if (this.$scope.showPictures)\n                        scrollTo('.pip-picture-list-edit');\n                    break;\n                case 'location':\n                    // On Location click action\n                    if (this.$scope.showLocation)\n                        scrollTo('.pip-location-edit');\n                    break;\n            };\n        };\n\n\n    }\n\n    const ContentSwitch = function ($parse: ng.IParseService) {\n        return {\n            restrict: 'EA',\n            scope: false,\n            templateUrl: 'content_switch/ContentSwitch.html',\n            link: function (\n                $scope: IContentSwitchScope,\n                $element: JQuery,\n                $attrs: IContentSwitchAttributes\n            ) {\n                new ContentSwitchLink($parse, $scope, $element, $attrs);\n            }\n        }\n    }\n\n    angular.module(\"pipContentSwitch\", ['pipComposite.Templates'])\n        .directive('pipContentSwitch', ContentSwitch);\n\n}","export class ChecklistItem {\n    checked: boolean;\n    text: string;\n    empty?: boolean;\n}","import { ChecklistItem } from './ChecklistItem';\n\nexport class ContentBlock {\n    public id?: number;\n    public type: string;\n    public text?: string;\n    public docs?: pip.documents.Attachment[];\n    public picIds?: pip.documents.Attachment[];\n    public pic_ids?: string[];\n    public loc_pos?: any; \n    public loc_name?: string;\n    public start?: string;\n    public end?: string;\n    public all_day?: boolean;\n    public checklist?: ChecklistItem[];\n    public embed_type?: string;\n    public embed_uri?: string;\n    public custom?: any;\n}","export class ContentBlockType {\n    public static readonly Text: string = \"text\";\n    public static readonly Checklist: string = \"checklist\";\n    public static readonly Location: string = \"location\";\n    public static readonly Time: string = \"time\";\n    public static readonly Pictures: string = \"pictures\";\n    public static readonly Documents: string = \"documents\";\n    public static readonly Embedded: string = \"embedded\";\n    public static readonly Custom: string = \"custom\";\n}","export class EmbeddedType {\n    public static readonly Youtube: string = \"youtube\";\n    public static readonly Custom: string = \"custom\";\n}","import './Content';\nimport './ChecklistItem';\nimport './ContentBlockType';\n\nexport * from './Content';\nexport * from './ChecklistItem';\nexport * from './ContentBlockType';","import { EmbeddedType } from '../data/EmbeddedType';\n\ninterface IEmbeddedEditBindings {\n    [key: string]: any;\n\n    embed_type: any;\n    embed_uri: any;\n    onChange: any;\n    ngDisabled: any;\n}\n\nconst EmbeddedEditBindings: IEmbeddedEditBindings = {\n    embed_type: '=?pipEmbeddedType',\n    embed_uri: '=?pipEmbeddedUri',\n    onChange: '=pipChanged',\n    ngDisabled: '&?ngDisabled'\n}\n\nclass EmbeddedEditChanges implements ng.IOnChangesObject, IEmbeddedEditBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n    embed_type: ng.IChangesObject<string>;\n    embed_uri: ng.IChangesObject<string>;\n    ngDisabled: ng.IChangesObject<() => ng.IPromise<void>>;\n    onChange: ng.IChangesObject<() => ng.IPromise<void>>;\n}\n\n// class EmbeddeObj {\n//     public embed_type: string;\n//     public embed_uri: string;\n// }\n\nclass EmbeddedEditController implements ng.IController {          public $onInit() {}\n    public form: any;\n    public touchedErrorsWithHint: Function;\n\n    public embed_type: string;\n    public embed_uri: string;\n    // public onChange: (params: EmbeddeObj) => void;\n    public onChange: (embedType: string, embedUri: string) => void;\n    public ngDisabled: () => boolean;\n\n    public embeddedTypeCollection = [\n        { title: 'EMBEDDED_TYPE_CUSTOM', shortTitle: 'EMBEDDED_TYPE_CUSTOM_SHORT',id: EmbeddedType.Custom },\n        { title: 'EMBEDDED_TYPE_YOUTUBE', shortTitle: 'EMBEDDED_TYPE_YOUTUBE_SHORT',id: EmbeddedType.Youtube }\n    ];\n\n    constructor(\n        private $element: JQuery,\n        private $scope: ng.IScope,\n        private $state: ng.ui.IStateService,\n        public pipMedia: pip.layouts.IMediaService\n    ) {\n        $element.addClass('pip-embedded-edit');\n\n        this.init();\n    }\n\n    public $onChanges(changes: EmbeddedEditChanges): void {\n        console.log('$onChanges');\n        this.init();\n    }\n\n    public $postLink() {\n        console.log('postlink', this.$scope)\n        this.form = this.$scope.embedded;\n    }\n\n    private init(): void {\n        if (!this.embed_type) {\n            this.embed_type = EmbeddedType.Custom;\n        }\n    }\n\n    public onChangeType(): void {\n        console.log('onChangeType');\n        if (!this.form.url.$error)\n            this.onChange(this.embed_type, this.embed_uri);\n    }\n\n    public onChangeUrl(): void {\n        console.log('onChangeUrl');\n        this.onChange(this.embed_type, this.embed_uri);\n    }\n\n    public isDisabled() {\n        if (this.ngDisabled) {\n            return this.ngDisabled();\n        }\n\n        return false;\n    };\n}\n\n(() => {\n\n    function declaredEmbeddedEditResources(pipTranslateProvider: pip.services.ITranslateProvider) {\n        pipTranslateProvider.translations('en', {\n            EMBEDDED_TYPE_LABEL: 'Embedded type',\n            EMBEDDED_URL_LABEL: 'Embedded uri',\n            EMBEDDED_TYPE_HINT: 'Enter uri of embedded resource',\n            EMBEDDED_URL_ERROR: 'Uri error',\n            EMBEDDED_TYPE_CUSTOM: 'Custom',\n            EMBEDDED_TYPE_YOUTUBE: 'Youtube',\n            EMBEDDED_TYPE_CUSTOM_SHORT: 'Custom',\n            EMBEDDED_TYPE_YOUTUBE_SHORT: 'Youtube'\n        });\n        pipTranslateProvider.translations('ru', {\n            EMBEDDED_TYPE_LABEL: 'Тип встроенного ресурса',\n            EMBEDDED_URL_LABEL: 'Uri встроенного ресурса',\n            EMBEDDED_TYPE_HINT: 'Введите uri встроенного ресурса',\n            EMBEDDED_URL_ERROR: 'Неверный uri',\n            EMBEDDED_TYPE_CUSTOM: 'Другой',\n            EMBEDDED_TYPE_YOUTUBE: 'Youtube',\n            EMBEDDED_TYPE_CUSTOM_SHORT: 'Другой',\n            EMBEDDED_TYPE_YOUTUBE_SHORT: 'Youtube'\n        });\n    }\n\n    angular\n        .module('pipEmbeddedEdit', [])\n        .component('pipEmbeddedEdit', {\n            bindings: EmbeddedEditBindings,\n            templateUrl: 'embedded_edit/EmbeddedEdit.html',\n            controller: EmbeddedEditController,\n            controllerAs: '$ctrl'\n        })\n        .config(declaredEmbeddedEditResources);\n})();\n","import { EmbeddedType } from '../data/EmbeddedType';\n\ninterface IEmbeddedViewBindings {\n    [key: string]: any;\n\n    embed_type: any;\n    embed_uri: any;\n}\n\nconst EmbeddedViewBindings: IEmbeddedViewBindings = {\n    embed_type: '=?pipEmbeddedType',\n    embed_uri: '=?pipEmbeddedUri',\n}\n\nclass EmbeddedViewChanges implements ng.IOnChangesObject, IEmbeddedViewBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n    embed_type: ng.IChangesObject<string>;\n    embed_uri: ng.IChangesObject<string>;\n}\n\nclass EmbeddedViewController implements ng.IController {\n    public $onInit() { }\n    public embed_type: string;\n    public embed_uri: string;\n\n    constructor(\n        private $element: JQuery,\n        public pipMedia: pip.layouts.IMediaService\n    ) {\n        $element.addClass('pip-embedded-view');\n\n        this.init();\n    }\n\n    public $onChanges(changes: EmbeddedViewChanges): void {\n        console.log('$onChanges');\n        this.init();\n    }\n\n    private init(): void {\n\n    }\n\n}\n\n(() => {\n\n    function declaredEmbeddedViewResources(pipTranslateProvider: pip.services.ITranslateProvider) {\n        pipTranslateProvider.translations('en', {\n\n        });\n        pipTranslateProvider.translations('ru', {\n\n        });\n    }\n\n    function resourceYoutubeConfig($sceDelegateProvider) {\n        $sceDelegateProvider.resourceUrlWhitelist([\n            'self',\n            'https://www.youtube.com/**'\n        ]);\n    }\n\n    angular\n        .module('pipEmbeddedView', [])\n        .component('pipEmbeddedView', {\n            bindings: EmbeddedViewBindings,\n            templateUrl: 'embedded_view/EmbeddedView.html',\n            controller: EmbeddedViewController,\n            controllerAs: '$ctrl'\n        })\n        .config(resourceYoutubeConfig)\n        .config(declaredEmbeddedViewResources);\n})();\n","/// <reference path=\"../typings/tsd.d.ts\" />\n\n\nimport './checklist_edit/ChecklistEdit';\nimport './checklist_view/ChecklistView';\nimport './composite_edit/CompositeEdit';\nimport './composite_summary/CompositeSummary';\nimport './composite_toolbar/CompositeToolbar';\nimport './composite_view/CompositeView';\nimport './utilities/CompositeFocused';\nimport './mobile_mouse';\nimport './content_switch/ContentSwitch';\nimport './embedded_edit/EmbeddedEdit';\nimport './embedded_view/EmbeddedView';\nimport './data';\n\nangular.module('pipComposite', [\n    'pipContentSwitch',\n    'pipChecklistEdit',\n    'pipChecklistView',\n    'pipCompositeEdit',\n    'pipCompositeView',\n    'pipCompositeSummary',\n    'pipCompositeToolbar',\n    'pipCompositeFocused',\n    'pipMobileMouse',\n    'pipEmbeddedEdit',\n    'pipEmbeddedView'\n]);\n\nexport * from './data';","{\n    interface IMobileMousedownAttributes extends ng.IAttributes {\n        pipMobileMousedown: any;\n    }\n\n    const MobileMousedown = (scope: ng.IScope, elem: JQuery, attrs: IMobileMousedownAttributes) => {\n        elem.bind(\"touchstart mousedown\", (e) => {\n            scope.$apply(attrs.pipMobileMousedown);\n        });\n    }\n\n    angular.module(\"pipMobileMouse\")\n        .directive('pipMobileMousedown', () => {\n            return MobileMousedown;\n        });\n}","{\n    interface IMobileMouseupAttributes extends ng.IAttributes {\n        pipMobileMouseup: any;\n    }\n\n    const MobileMouseup = (scope: ng.IScope, elem: JQuery, attrs: IMobileMouseupAttributes) => {\n        elem.bind(\"touchend mouseup\", (e) => {\n            scope.$apply(attrs.pipMobileMouseup);\n        });\n    }\n\n    angular.module(\"pipMobileMouse\")\n        .directive('pipMobileMouseup', () => {\n            return MobileMouseup;\n        });\n}","angular.module('pipMobileMouse', []);\n\nimport './MobileMousedown';\nimport './MobileMouseup';","export const CompositeFocusedEvent: string = 'focusedComposite'; \n\n{\n    class CompositeFocusedController {\n        constructor(\n            $element: JQuery,\n            $rootScope: angular.IRootScopeService\n        ) {\n            $element.bind(\"touchstart mousedown\", (e) => {\n                $rootScope.$broadcast(CompositeFocusedEvent);\n            });\n        }\n    }\n\n    const CompositeFocused = function () {\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: CompositeFocusedController\n        }\n    }\n\n    angular.module(\"pipCompositeFocused\", [])\n        .directive('pipCompositeFocused', CompositeFocused);\n\n}","(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('checklist_edit/ChecklistEdit.html',\n    '<div ng-class=\"{\\'pip-checklist-draggable\\': $ctrl.selected.drag}\" id=\"{{\\'checklist-\\' + $ctrl.selected.id}}\"><div ng-repeat=\"item in $ctrl.checklistContent\" ng-mousedown=\"$ctrl.onClick($event, $index)\" class=\"pip-checklist-item\" id=\"{{\\'check-item-\\' + $ctrl.selected.id + \\'-\\' + $index}}\" pip-drag=\"$ctrl.checklistContent.length > 1 && $ctrl.selected.drag && !item.empty\" pip-drag-data=\"item\" pip-force-touch=\"true\" pip-touch-delay=\"30\" pip-drop=\"true\" pip-drag-stop=\"$ctrl.onStop(selected.id)\" pip-drag-start=\"$ctrl.onStart(selected.id)\" pip-scroll-container=\"$ctrl.pipScrollContainer\" pip-drop-success=\"$ctrl.onDropComplete($index, $data, $event, $ctrl.selected.id)\"><div ng-class=\"{\\'put_place\\': $ctrl.selected.drag}\"></div><div class=\"pip-checklist-item-body layout-row layout-align-start-start\" pip-cancel-drag=\"true\" ng-class=\"{ \\'select-active-item\\': $ctrl.isSelectedItem($index) }\"><div class=\"pip-checklist-button\" pip-cancel-drag=\"true\"><md-button pip-drag-handle=\"\" class=\"pip-icon-checklist-button md-icon-button no-ripple-container\" aria-label=\"REARRANGE\" tabindex=\"-1\" pip-mobile-mousedown=\"$ctrl.onDownDragg(item)\" pip-mobile-mouseup=\"$ctrl.onDraggEnd()\" ng-if=\"$ctrl.pipDraggable && $ctrl.checklistContent.length > 2 && !item.empty\" ng-class=\"$ctrl.checklistContent.length > 1 ? \\'cursor-move\\' : \\'cursor-default\\'\" ng-disabled=\"$ctrl.ngDisabled\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:vhandle\"></md-icon></md-button></div><div class=\"pip-checklist-button\" style=\"overflow: hidden\" pip-cancel-drag=\"true\"><div class=\"pip-checklist-button-container\"><md-button class=\"pip-icon-checklist-button md-icon-button\" ng-show=\"item.empty\" ng-disabled=\"$ctrl.ngDisabled\" md-ink-ripple=\"\" ng-click=\"$ctrl.onAddItem()\" tabindex=\"-1\" aria-label=\"PLUS\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:plus\"></md-icon></md-button><md-checkbox ng-model=\"item.checked\" ng-show=\"!item.empty\" aria-label=\"COMPLETE\" pip-cancel-drag=\"true\" ng-focus=\"$ctrl.onItemFocus($index)\" ng-change=\"$ctrl.onChecked(item)\" ng-disabled=\"$ctrl.ngDisabled\"></md-checkbox></div></div><div class=\"pip-checklist-text flex\" pip-cancel-drag=\"true\"><md-input-container md-no-float=\"\" class=\"flex\"><textarea ng-model=\"item.text\" name=\"{{\\'text\\' + $index}}\" aria-label=\"TEXT\" class=\"pip-text-checkbox\" ng-focus=\"$ctrl.onItemFocus($index)\" ng-change=\"$ctrl.onChangeItem($index)\" ng-keydown=\"$ctrl.onTextareaKeyDown($event, $index, item)\" placeholder=\"{{::\\'TEXT\\' | translate}}\" id=\"{{\\'check-item-text-\\' + selected.id + \\'-\\' + $index}}\" ng-disabled=\"$ctrl.ngDisabled\">\\n' +\n    '                    </textarea></md-input-container></div><div class=\"pip-checklist-button\" pip-cancel-drag=\"true\"><md-button class=\"pip-icon-checklist-button md-icon-button\" md-ink-ripple=\"\" ng-click=\"$ctrl.onDeleteItem($index, item)\" ng-disabled=\"$ctrl.ngDisabled\" tabindex=\"-1\" ng-focus=\"$ctrl.onItemFocus($index)\" ng-show=\"$ctrl.isSelectedItem($index)\" aria-label=\"DELETE-ITEM\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:cross-circle\"></md-icon></md-button></div></div></div><div id=\"{{\\'check-item-empty-\\' + $ctrl.selected.id}}\" class=\"pip-empty-text\" pip-drag=\"false\" pip-drop=\"true\" pip-drop-success=\"$ctrl.onDropComplete($ctrl.checklistContent.length, $data, $event, $ctrl.selected.id)\"><div ng-class=\"{\\'put_place\\': $ctrl.selected.drag}\"></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('checklist_view/ChecklistView.html',\n    '<div ng-repeat=\"item in $ctrl.pipOptions track by $index\"><div class=\"pip-checklist-item layout-row layout-align-start-start\"><div class=\"pip-checklist-icon\"><md-checkbox ng-model=\"item.checked\" ng-click=\"$ctrl.onClick($event, item)\" aria-label=\"COMPLETE\" ng-disabled=\"$ctrl.ngDisabled\"></md-checkbox></div><div class=\"pip-checklist-text flex\"><pip-markdown pip-text=\"item.text\" pip-rebind=\"true\" ng-disabled=\"true\"></pip-markdown></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('composite_edit/CompositeEdit.html',\n    '<div class=\"divider-top\"><div class=\"pip-composite-body\" ng-show=\"$ctrl.compositeContent.length != 0\" ng-class=\"{\\'drag-active\\': $ctrl.selected.drag}\"><div class=\"pip-composite-item\" ng-repeat=\"obj in $ctrl.compositeContent track by obj.id\" ng-mousedown=\"$ctrl.onClick($event, $index, obj)\" ng-class=\"{\\'selected-content\\': $ctrl.isSelectedSection($index, obj), \\'composite-animate\\': !obj.empty && $ctrl.compositeContent.length > 1}\" ng-keyup=\"$ctrl.onKeyUp($event)\" ng-keydown=\"$ctrl.onKeyDown($event, $index, obj)\" pip-drag=\"$ctrl.compositeContent.length > 1 && $ctrl.selected.drag\" pip-touch-delay=\"10\" pip-drag-data=\"obj\" pip-scroll-container=\"$ctrl.pipScrollContainer\" pip-drop=\"true\" pip-force-touch=\"true\" pip-drag-stop=\"$ctrl.onStop($ctrl.selected.id)\" pip-drag-start=\"$ctrl.onStart($ctrl.selected.id)\" pip-drop-success=\"$ctrl.onDropComplete($index, $data, $event, $ctrl.selected.id)\" id=\"{{\\'composite-item-\\' + $ctrl.selected.id + \\'-\\' + $index}}\"><div class=\"putt_box\"></div><div class=\"pip-section-header layout-row layout-align-start-center\" ng-if=\"!obj.empty\"><div class=\"w38\"></div><md-button class=\"md-icon-button md-icon-button-little icon-rearrange-btn no-ripple-container rm8 cursor-move\" ng-if=\"!$ctrl.ngDisabled && $ctrl.compositeContent.length > 1\" pip-drag-handle=\"\" pip-mobile-mousedown=\"$ctrl.onDownDragg($event, obj)\" pip-mobile-mouseup=\"$ctrl.onDraggEnd()\" tabindex=\"-1\" aria-label=\"COMPOSITE-DRAGG\" ng-hide=\"$ctrl.compositeContent.length == 1\"><md-icon class=\"composite-icon cursor-move\" md-svg-icon=\"icons:handle\"></md-icon></md-button><div><md-button class=\"md-icon-button md-icon-button-little rm8\" ng-click=\"$ctrl.onDeleteItem($index)\" ng-disabled=\"$ctrl.ngDisabled\" aria-label=\"COMPOSITE-DELETE\"><md-icon class=\"composite-icon\" md-svg-icon=\"icons:cross\"></md-icon></md-button></div></div><div class=\"pip-section-content rp24-flex lp24-flex tp16 bp16\" ng-if=\"obj.type == \\'text\\'\" pip-cancel-drag=\"true\"><md-input-container class=\"p0 m0 w-stretch\" md-no-float=\"\"><textarea ng-model=\"obj.text\" aria-label=\"text\" placeholder=\"{{ $ctrl.isFirst ? $ctrl.compositePlaceholder : \\'TEXT\\' | translate}}\" id=\"{{\\'composite-item-text-\\' + $ctrl.selected.id + \\'-\\' + $index}}\" ng-change=\"$ctrl.onContentChange(obj)\" pip-cancel-drag=\"true\" ng-disabled=\"$ctrl.ngDisabled\">\\n' +\n    '                            </textarea></md-input-container></div><div class=\"pip-section-content rp24-flex lp24-flex vp20\" ng-if=\"obj.type == \\'pictures\\'\" pip-cancel-drag=\"true\"><pip-picture-list-edit class=\"w-stretch\" pip-cancel-drag=\"true\" pip-pictures=\"obj.picIds\" pip-changed=\"$ctrl.onContentChange(obj)\" pip-created=\"obj.pictures = $event.sender\" pip-added-picture=\"$ctrl.addedContent\" ng-disabled=\"$ctrl.ngDisabled\"></pip-picture-list-edit></div><div class=\"pip-section-content rp24-flex lp24-flex vp20\" ng-if=\"obj.type == \\'documents\\'\" pip-cancel-drag=\"true\"><pip-document-list-edit class=\"w-stretch\" pip-documents=\"obj.docs\" pip-cancel-drag=\"true\" pip-changed=\"$ctrl.onContentChange(obj)\" pip-created=\"obj.documents = $event.sender\" pip-added-document=\"$ctrl.addedContent\" ng-disabled=\"$ctrl.ngDisabled\"></pip-document-list-edit></div><div class=\"pip-section-embedded rp24-flex lp24-flex vp20\" ng-if=\"obj.type == \\'embedded\\'\" pip-cancel-drag=\"true\"><pip-embedded-edit pip-embedded-type=\"obj.embed_type\" pip-embedded_uri=\"obj.embed_uri\" pip-cancel-drag=\"true\" pip-changed=\"$ctrl.onContentChange(obj)\" ng-disabled=\"$ctrl.ngDisabled\"></pip-embedded-edit></div><div class=\"pip-section-content layout-row layout-align-start-center\" ng-if=\"obj.type == \\'checklist\\'\" pip-cancel-drag=\"true\"><pip-checklist-edit pip-options=\"obj.checklist\" pip-draggable=\"$ctrl.isActiveChecklist(obj)\" pip-changed=\"$ctrl.onContentChange(obj)\" ng-disabled=\"$ctrl.ngDisabled\" pip-scroll-container=\"$ctrl.pipScrollContainer\" pip-rebind=\"true\"></pip-checklist-edit></div><div class=\"pip-section-content vp20 rp24-flex lp24-flex\" ng-if=\"obj.type == \\'location\\'\" pip-cancel-drag=\"true\"><pip-location-edit class=\"pip-location-attachments w-stretch\" pip-location-name=\"obj.loc_name\" pip-location-pos=\"obj.loc_pos\" pip-cancel-drag=\"true\" xxxpip-location-holder=\"$ctrl.pipLocationHolder\" pip-changed=\"$ctrl.onContentChange(obj)\" ng-disabled=\"$ctrl.ngDisabled\"></pip-location-edit></div><div class=\"pip-section-content bp16-flex rp24-flex lp24-flex tp20\" ng-if=\"obj.type == \\'time\\'\" pip-cancel-drag=\"true\"><pip-time-range-edit class=\"w-stretch\" pip-start-date=\"obj.start\" pip-end-date=\"obj.end\" xxxpip-size=\"$sizeGtSmall\" pip-changed=\"$ctrl.onContentChange(obj)\" ng-disabled=\"$ctrl.ngDisabled\" pip-start-label=\"{{ \\'COMPOSITE_START_TIME\\' | translate }}\" pip-end-label=\"{{ \\'COMPOSITE_END_TIME\\' | translate }}\"></pip-time-range-edit></div></div><div class=\"pip-composite-item w-stretch\" pip-drag=\"false\" pip-drop=\"true\" pip-drop-success=\"$ctrl.onDropComplete($ctrl.compositeContent.length, $data, $event, $ctrl.selected.id)\" pip-drag-stop=\"$ctrl.onStop($ctrl.selected.id)\" pip-drag-start=\"$ctrl.onStart($ctrl.selected.id)\" id=\"{{\\'pip-composite-last-\\' + $ctrl.selected.id}}\"><div class=\"putt_box\"></div><div class=\"pip-section-content h24\" style=\"border: 0px!important;\"></div></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('composite_summary/CompositeSummary.html',\n    '<div ng-repeat=\"item in $ctrl.compositeContent track by $index\"><div class=\"pip-composite-text\" ng-if=\"item.type == \\'text\\' && item.text\"><pip-markdown pip-text=\"item.text\" pip-line-count=\"$ctrl.textSize\" pip-rebind=\"true\" ng-disabled=\"true\"></pip-markdown></div><div ng-if=\"item.type == \\'pictures\\' && item.picIds && item.picIds.length > 0\" ng-class=\"$ctrl.compositeContent[$index - 1].type != \\'pictures\\' ? $ctrl.compositeContent[$index + 1].type != \\'pictures\\' ? \\'tm16 bm16\\' : \\'tm16 bm0\\' : $ctrl.compositeContent[$index + 1].type != \\'pictures\\' ? \\'tm8 bm16\\' : \\'tm8 bm0\\'\" class=\"pip-composite-pictures\"><pip-collage pip-pictures=\"item.picIds\" pip-unique-code=\"item.id\" pip-multiple=\"true\" pip-open=\"$ctrl.disableControl\" pip-rebind=\"true\" ng-disabled=\"$ctrl.disableControl\"></pip-collage></div><div ng-if=\"item.type == \\'documents\\' && item.docs && item.docs.length > 0\" class=\"pip-composite-documents layout-row flex\"><pip-document-list class=\"flex\" pip-documents=\"item.docs\" pip-rebind=\"true\" pip-document-icon=\"true\" pip-collapse=\"true\" ng-disabled=\"$ctrl.disableControl\"></pip-document-list></div><div ng-if=\"item.type == \\'checklist\\' && item.checklist && item.checklist.length > 0\" class=\"pip-composite-checklist\"><pip-checklist-view pip-options=\"item.checklist\" pip-changed=\"$ctrl.onContentChange()\" pip-rebind=\"true\" pip-collapse=\"true\" ng-disabled=\"$ctrl.disabledChecklist\"></pip-checklist-view></div><div class=\"pip-composite-location layout-row layout-align-start-center flex\" ng-if=\"item.type == \\'location\\' && (item.loc_pos || item.loc_name)\"><pip-location class=\"flex\" pip-location-name=\"item.loc_name\" pip-location-pos=\"item.loc_pos\" pip-collapse=\"true\" pip-show-location-icon=\"true\" ng-disabled=\"$ctrl.disableControl\" pip-rebind=\"true\"></pip-location></div><div class=\"pip-composite-time layout-row layout-align-start-center flex\" ng-if=\"item.type == \\'time\\' && (item.start || item.end)\"><md-icon md-svg-icon=\"icons:time\" class=\"rm24 lm0\"></md-icon><pip-time-range pip-start-date=\"item.start\" pip-end-date=\"item.end\" pip-rebind=\"true\" ng-disabled=\"$ctrl.disableControl\"></pip-time-range></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('composite_toolbar/CompositeToolbar.html',\n    '<div class=\"layout-row layout-align-start-start flex\"><md-button class=\"pip-composite-button\" ng-if=\"!$ctrl.emptyState\" ng-class=\"{ \\'remove-item\\': !$ctrl.emptyState , \\'new-item\\': !$ctrl.emptyState }\" ng-click=\"$ctrl.onAddItem(\\'text\\');\" aria-label=\"COMPOSITE-BUTTON-TEXT\" ng-disabled=\"$ctrl.ngDisabled\"><md-icon class=\"icon-text-block\" md-svg-icon=\"icons:text\"></md-icon><md-tooltip>{{::\\'TEXT\\'| translate}}</md-tooltip></md-button><md-button ng-if=\"$ctrl.toolbarButton.checklist\" ng-click=\"$ctrl.onAddItem(\\'checklist\\')\" ng-disabled=\"$ctrl.ngDisabled\" class=\"pip-composite-button\" aria-label=\"COMPOSITE-BUTTON-CHECKLIST\"><md-icon class=\"icon-checkbox-on\" md-svg-icon=\"icons:checkbox-on\"></md-icon><md-tooltip>{{::\\'CHECKLIST\\'| translate}}</md-tooltip></md-button><md-button ng-if=\"$ctrl.toolbarButton.picture\" ng-click=\"$ctrl.onAddItem(\\'pictures\\')\" ng-disabled=\"$ctrl.ngDisabled\" class=\"pip-composite-button\" aria-label=\"COMPOSITE-BUTTON-PICTURES\"><md-icon class=\"icon-camera\" md-svg-icon=\"icons:camera\"></md-icon><md-tooltip>{{::\\'PICTURE\\'| translate}}</md-tooltip></md-button><md-button ng-click=\"$ctrl.onAddItem(\\'documents\\')\" ng-if=\"$ctrl.toolbarButton.document\" ng-disabled=\"$ctrl.ngDisabled\" class=\"pip-composite-button\" aria-label=\"COMPOSITE-BUTTON-DOCUMENTS\"><md-icon class=\"icon-document\" md-svg-icon=\"icons:document\"></md-icon><md-tooltip>{{::\\'DOCUMENT\\'| translate}}</md-tooltip></md-button><md-button ng-click=\"$ctrl.onAddItem(\\'location\\')\" ng-if=\"$ctrl.toolbarButton.location\" ng-disabled=\"$ctrl.ngDisabled\" class=\"pip-composite-button\" aria-label=\"COMPOSITE-BUTTON-LOCATIONS\"><md-icon class=\"icon-location\" md-svg-icon=\"icons:location\"></md-icon><md-tooltip>{{::\\'LOCATION\\'| translate}}</md-tooltip></md-button><md-button ng-click=\"$ctrl.onAddItem(\\'time\\')\" ng-if=\"$ctrl.toolbarButton.event\" ng-disabled=\"$ctrl.ngDisabled\" class=\"pip-composite-button\" aria-label=\"COMPOSITE-BUTTON-TIME\"><md-icon class=\"icon-time\" md-svg-icon=\"icons:time\"></md-icon><md-tooltip>{{::\\'TIME\\'| translate}}</md-tooltip></md-button></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('composite_view/CompositeView.html',\n    '<div ng-repeat=\"item in $ctrl.compositeContent track by $index\"><div class=\"pip-composite-text lp24-flex rp24-flex\" ng-if=\"item.type == \\'text\\' && item.text\" ng-class=\"{\\'bm16\\': $last}\"><pip-markdown pip-text=\"item.text\" pip-rebind=\"true\" ng-disabled=\"true\"></pip-markdown></div><div ng-if=\"item.type == \\'pictures\\' && item.picIds && item.picIds.length > 0\" ng-class=\"$ctrl.compositeContent[$index - 1].type != \\'pictures\\' ? $ctrl.compositeContent[$index + 1].type != \\'pictures\\' ? \\'tm16 bm16\\' : \\'tm16 bm0\\' : $ctrl.compositeContent[$index + 1].type != \\'pictures\\' ? \\'tm8 bm16\\' : \\'tm8 bm0\\'\" class=\"pip-composite-pictures lp24-flex rp24-flex\"><pip-collage pip-pictures=\"item.picIds\" pip-unique-code=\"item.id\" pip-multiple=\"true\" pip-open=\"true\" pip-rebind=\"true\" ng-disabled=\"$ctrl.ngDisabled\"></pip-collage></div><div ng-if=\"item.type == \\'documents\\' && item.docs && item.docs.length > 0\" class=\"pip-composite-documents layout-row layout-align-start-start flex\"><pip-document-list pip-documents=\"item.docs\" pip-document-icon=\"true\" pip-rebind=\"true\" ng-disabled=\"$ctrl.ngDisabled\"></pip-document-list></div><div ng-if=\"item.type == \\'checklist\\' && item.checklist && item.checklist.length > 0\" class=\"pip-composite-checklist lp24-flex rp24-flex\"><pip-checklist-view pip-options=\"item.checklist\" pip-changed=\"$ctrl.onContentChange()\" pip-rebind=\"true\" ng-disabled=\"$ctrl.isDisabled()\"></pip-checklist-view></div><div class=\"pip-composite-location layout-row layout-align-start-start flex\" ng-if=\"item.type == \\'location\\' && (item.loc_pos || item.loc_name)\"><pip-location class=\"flex\" pip-location-name=\"item.loc_name\" pip-location-pos=\"item.loc_pos\" pip-show-location-icon=\"true\" pip-collapse=\"false\" ng-disabled=\"$ctrl.ngDisabled\" pip-rebind=\"true\"></pip-location></div><div class=\"pip-composite-time lp24-flex rp24-flex layout-row layout-align-start-center flex\" ng-if=\"item.type == \\'time\\'\"><md-icon md-svg-icon=\"icons:time\" class=\"lm0\"></md-icon><pip-time-range pip-start-date=\"item.start\" pip-end-date=\"item.end\" pip-rebind=\"true\" ng-disabled=\"ngDisabled()\"></pip-time-range></div><div class=\"pip-composite-embedded lp24-flex rp24-flex layout-row layout-align-start-center flex\" ng-if=\"item.type == \\'embedded\\' && item.embed_uri\"><pip-embedded-view class=\"bm8\" pip-embedded-type=\"item.embed_type\" pip-embedded-uri=\"item.embed_uri\"></pip-embedded-view></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('content_switch/ContentSwitch.html',\n    '<md-button ng-click=\"showPictures = !showPictures; onButtonClick(\\'pictures\\')\" aria-label=\"showPictures\" class=\"md-icon-button\" ng-show=\"showIconPicture\" ng-disabled=\"transaction.busy()\"><md-icon class=\"active-camera\" ng-class=\"{ \\'active-camera\\': showPictures }\" md-svg-icon=\"icons:camera\"></md-icon></md-button><md-button ng-click=\"showDocuments = !showDocuments; onButtonClick(\\'documents\\')\" aria-label=\"showDocuments\" class=\"md-icon-button\" ng-show=\"showIconDocument\" ng-disabled=\"transaction.busy()\"><md-icon ng-class=\"{ \\'active-document\\': showDocuments }\" md-svg-icon=\"icons:document\"></md-icon></md-button><md-button ng-click=\"showEvent = !showEvent; onButtonClick(\\'event\\')\" aria-label=\"showEvent\" class=\"md-icon-button\" ng-show=\"showIconEvent\" ng-disabled=\"transaction.busy()\"><md-icon ng-class=\"{ \\'active-time\\': showEvent }\" md-svg-icon=\"icons:time\"></md-icon></md-button><md-button ng-click=\"showLocation = !showLocation; onButtonClick(\\'location\\')\" aria-label=\"showLocation\" class=\"md-icon-button\" ng-show=\"showIconLocation\" ng-disabled=\"transaction.busy()\"><md-icon ng-class=\"{ \\'active-location\\': showLocation }\" md-svg-icon=\"icons:location\"></md-icon></md-button>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('embedded_edit/EmbeddedEdit.html',\n    '<form name=\"embedded\"><md-input-container class=\"md-block flex bm24\"><label>{{ ::\\'EMBEDDED_TYPE_LABEL\\'| translate }}</label><md-select ng-model=\"$ctrl.embed_type\" ng-change=\"$ctrl.onChangeType()\" ng-disabled=\"$ctrl.isDisabled()\"><md-option ng-repeat=\"t in $ctrl.embeddedTypeCollection track by $index\" ng-value=\"t.id\">{{ ::t.title | translate }}</md-option></md-select></md-input-container><md-input-container class=\"md-block flex\"><label>{{::\\'EMBEDDED_URL_LABEL\\' | translate}}</label> <input ng-model=\"$ctrl.embed_uri\" ng-required=\"$ctrl.embed_uri\" type=\"url\" name=\"url\" ng-change=\"$ctrl.onChangeUrl()\" ng-disabled=\"$ctrl.isDisabled()\" ng-model-options=\"{ delay: 500 }\"><div class=\"hint\" ng-if=\"!embedded.url.$error\">{{::\\'EMBEDDED_TYPE_HINT\\' | translate}}</div><div ng-messages=\"embedded.url.$error\" role=\"alert\"><div ng-message=\"url\">{{ \\'EMBEDDED_URL_ERROR\\' | translate }}</div></div></md-input-container></form>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipComposite.Templates');\n} catch (e) {\n  module = angular.module('pipComposite.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('embedded_view/EmbeddedView.html',\n    '<iframe width=\"100%\" height=\"170\" frameborder=\"0\" allowfullscreen=\"\" ng-if=\"$ctrl.embed_type == \\'youtube\\'\" ng-src=\"{{ $ctrl.embed_uri }}\" style=\"margin: 0 auto;\"></iframe><iframe width=\"100%\" height=\"170\" frameborder=\"0\" allowfullscreen=\"\" style=\"margin: 0 auto;\" ng-src=\"{{ $ctrl.embed_uri }}\" ng-if=\"$ctrl.embed_type == \\'custom\\'\"><p><a href=\"{{ $ctrl.embed_uri }}\">{{ $ctrl.embed_uri }}</a></p></iframe>');\n}]);\n})();\n\n//# sourceMappingURL=pip-suite-composite-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}